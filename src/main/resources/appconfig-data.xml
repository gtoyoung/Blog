<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:jpa="http://www.springframework.org/schema/data/jpa"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.2.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/data/jpa http://www.springframework.org/schema/data/jpa/spring-jpa-1.8.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd">


	<jpa:repositories base-package="test.sample.dao" />

	<!-- base package에 속해있는 어노테이션을 명시한 자바 파일들을 Bean으로 등록되도록 하기위한 설정 -->
	<context:component-scan
		base-package="test.sample.repository, test.sample.service, test.sample.security" />

	<!-- DB 정보 및 Connection pool 설정 -->
	<bean id="dataSource"
		class="org.apache.tomcat.jdbc.pool.DataSource">
		<property name="driverClassName"
			value="org.mariadb.jdbc.Driver" />
		<property name="url"
			value="jdbc:mariadb://192.168.219.149:7043/MyBlog" />
		<!-- <property name="url" value="jdbc:mariadb://119.71.129.160:7043/TestBlog" 
			/> -->
		<property name="username" value="root" />
		<property name="password" value="wodms0626" />
		<property name="maxActive" value="30" />
		<property name="maxIdle" value="10" />
		<property name="maxWait" value="20000" />
		<property name="logAbandoned" value="true" />
		<property name="removeAbandoned" value="true" />
		<property name="removeAbandonedTimeout" value="60" />
		<property name="validationQuery" value="select 1" />
		<property name="testOnBorrow" value="true" />
		<property name="testOnReturn" value="true" />
	</bean>

	<!-- 트랜잭션 처리할 주체 정의 -->
	<bean id="transactionManager"
		class="org.springframework.orm.jpa.JpaTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>

	<!-- 해당 선언을 해야지 @Transactional 어노테이션을 이용하여 트랜잭션 처리를 할 수있다. -->
	<tx:annotation-driven
		transaction-manager="transactionManager" /><!-- transactionManager라는 이름은 
		기본값임 -->

	<bean id="uploadPath" class="java.lang.String">
		<constructor-arg value="C:\\zzz\\upload" />
	</bean>

	<!-- JPA 예외를 스프링 예외로 변환 -->
	<bean
		class="org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessor" />

	<!-- 엔티티를 저장하는 논리적인 저장공간 설정? -->
	<bean id="entityManagerFactory"
		class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="packagesToScan" value="test.sample.entity" /> <!-- @Entity 탐색 시작 위치 -->
		<property name="jpaVendorAdapter">
			<!-- 하이버네이트 구현체 사용 -->
			<bean
				class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter" />
		</property>

		<property name="jpaProperties"> <!-- 하이버네이트 상세 설정 -->
			<props>
				<prop key="hibernate.dialect">org.hibernate.dialect.MySQLDialect</prop> <!-- 방언 -->
				<prop key="hibernate.show_sql">true</prop>                   <!-- SQL 보기 -->
				<prop key="hibernate.format_sql">true</prop>                 <!-- SQL 정렬해서 보기 -->
				<prop key="hibernate.use_sql_comments">true</prop>           <!-- SQL 코멘트 보기 -->
				<prop key="hibernate.id.new_generator_mappings">true</prop>  <!-- 새 버전의 ID 생성 옵션 -->
				<prop key="hibernate.current_session_context_class">thread</prop>
				<prop key="hibernate.hbm2ddl.auto">update</prop>             <!-- DDL 자동 생성 -->
				<!-- <prop key="jdbc.fetch_size">50</prop> <prop key="jdbc.batch_size">25</prop> 
					<prop key="hibernate.cache.use_query_cache">true</prop> <prop key="hibernate.cache.region.factory_class">net.sf.ehcache.hibernate.EhCacheRegionFactory</prop> 
					<prop key="hibernate.cache.provider_class"> org.hibernate.cache.EhCacheProvider 
					</prop> <prop key="hibernate.query.substitutions"> true 1,false 0 </prop> 
					<prop key="hibernate.c3p0.initialPoolSize">10</prop> <prop key="hibernate.c3p0.minPoolSize">10</prop> 
					<prop key="hibernate.c3p0.maxPoolSize">50</prop> <prop key="hibernate.c3p0.acquireIncrement">2</prop> 
					<prop key="hibernate.c3p0.timeout">10</prop> <prop key="hibernate.c3p0.max_statement">50</prop> 
					dataSource가 c3p0 일경우 생략 <prop key="hibernate.c3p0.testConnectionOnCheckin"> 
					true </prop> dataSource가 c3p0 일경우 생략 <prop key="hibernate.c3p0.testConnectionOnCheckout"> 
					false </prop> <prop key="hibernate.c3p0.maxStatementsPerConnection"> 5 </prop> 
					dataSource가 c3p0 일경우 생략 <prop key="hibernate.c3p0.maxIdleTime">300</prop> 
					<prop key="hibernate.c3p0.maxConnectionAge">14400</prop> <prop key="hibernate.c3p0.acquireRetryAttempts">10</prop> 
					<prop key="hibernate.c3p0.preferredTestQuery"> SELECT 1; </prop> dataSource가 
					c3p0 일경우 생략 <prop key="hibernate.c3p0.idleConnectionTestPeriod"> 300 </prop> -->
			</props>
		</property>

	</bean>

	<!-- hibernate 설정이라는데... -->
	<mvc:interceptors>
		<bean
			class="org.springframework.orm.jpa.support.OpenEntityManagerInViewInterceptor">
			<property name="entityManagerFactory"
				ref="entityManagerFactory" />
		</bean>
	</mvc:interceptors>

</beans>
